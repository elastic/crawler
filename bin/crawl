#!/usr/bin/env ruby

# Load crawler environment
require_relative '../lib/environment'

# Standard libraries
require 'getoptlong'
require 'yaml'

#---------------------------------------------------------------------------------------------------
def die(message, print_help = false)
  puts "ERROR: #{message}"
  if print_help
    puts
    print_usage_help
  end

  exit(1)
end

#---------------------------------------------------------------------------------------------------
def load_yaml(file_path)
  die("Config file #{file_path} does not exist!") unless File.readable?(file_path)
  config =
    begin
      YAML.load_file(file_path)
    rescue StandardError => e
      die("Failed to load config file #{file_path}: #{e}")
    end
  config
end

#---------------------------------------------------------------------------------------------------
def print_usage_help
  puts <<-EOF
Usage: #{$PROGRAM_NAME} [options]

Where:
--crawl-config  Path to crawl config file (required)
--es-config     Path to elasticsearch config file (optional)
--debug         Enable verbose mode (optional)
--help          Shows this help.

Useful examples:
# #{$PROGRAM_NAME} --es-config elasticsearch.yml --crawl-config crawler.yml
  EOF
end

#---------------------------------------------------------------------------------------------------
# Defaults
verbose_logging = false

# Parse options
opts = GetoptLong.new(
  ['--debug', '-v', GetoptLong::NO_ARGUMENT],
  ['--help', '-h', GetoptLong::NO_ARGUMENT],
  ['--es-config', GetoptLong::REQUIRED_ARGUMENT],
  ['--crawl-config', GetoptLong::REQUIRED_ARGUMENT]
)

es_config = {}
crawl_config = nil

# Process options
begin
  opts.each do |opt, arg|
    case opt
    when '--debug'
      verbose_logging = true
    when '--help'
      print_usage_help
      exit(0)
    when '--es-config'
      es_config = load_yaml(arg)
    when '--crawl-config'
      crawl_config = load_yaml(arg)
    else
      die("#{opt} is not a supported option. Use #{$PROGRAM_NAME} --help to see supported options.")
    end
  end
rescue GetoptLong::Error => e
  puts
  die(e, true)
end

# Require a crawl config
die('Please specify the crawl config file.') if crawl_config == nil

# Combine configs and apply to crawler
config = es_config.merge(crawl_config)
crawl_config = Crawler::API::Config.new(**config.deep_symbolize_keys)
crawl = Crawler::API::Crawl.new(crawl_config)

# Perform the crawl!
crawl.start!
